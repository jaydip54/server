const mongoose = require("mongoose");

const RatingSchema = new mongoose.Schema(
  {
    user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    businessPlace: { type: mongoose.Schema.Types.ObjectId, ref: "BusinessPlace", required: true },
    rate: { type: Number, min: 1, max: 5, required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Rating", RatingSchema);




const Rating = require("../models/Rating");

// Create a new rating
const createRating = async (data) => {
  return await Rating.create(data);
};

// Get all ratings
const getAllRatings = async () => {
  return await Rating.find().populate(["user", "businessPlace"]);
};

// Get a specific rating by ID
const getRatingById = async (id) => {
  return await Rating.findById(id).populate(["user", "businessPlace"]);
};

// Update a rating
const updateRating = async (id, data) => {
  return await Rating.findByIdAndUpdate(id, data, { new: true });
};

// Delete a rating
const deleteRating = async (id) => {
  return await Rating.findByIdAndDelete(id);
};

module.exports = {
  createRating,
  getAllRatings,
  getRatingById,
  updateRating,
  deleteRating,
};




const ratingService = require("../services/ratingService");

// Create a new rating
const createRating = async (req, res) => {
  try {
    const rating = await ratingService.createRating(req.body);
    res.status(201).json(rating);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all ratings
const getAllRatings = async (req, res) => {
  try {
    const ratings = await ratingService.getAllRatings();
    res.status(200).json(ratings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a specific rating by ID
const getRatingById = async (req, res) => {
  try {
    const rating = await ratingService.getRatingById(req.params.id);
    if (!rating) return res.status(404).json({ message: "Rating not found" });
    res.status(200).json(rating);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a rating
const updateRating = async (req, res) => {
  try {
    const updatedRating = await ratingService.updateRating(req.params.id, req.body);
    if (!updatedRating) return res.status(404).json({ message: "Rating not found" });
    res.status(200).json(updatedRating);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Delete a rating
const deleteRating = async (req, res) => {
  try {
    const deletedRating = await ratingService.deleteRating(req.params.id);
    if (!deletedRating) return res.status(404).json({ message: "Rating not found" });
    res.status(200).json({ message: "Rating deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createRating,
  getAllRatings,
  getRatingById,
  updateRating,
  deleteRating,
};






const express = require("express");
const router = express.Router();
const ratingController = require("../controllers/ratingController");

router.post("/", ratingController.createRating);
router.get("/", ratingController.getAllRatings);
router.get("/:id", ratingController.getRatingById);
router.put("/:id", ratingController.updateRating);
router.delete("/:id", ratingController.deleteRating);

module.exports = router;
