const mongoose = require("mongoose");

const BookParkingSchema = new mongoose.Schema(
  {
    user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    businessRegisterPlace: { type: mongoose.Schema.Types.ObjectId, ref: "BusinessPlace", required: true },
    parkingSpace: { type: mongoose.Schema.Types.ObjectId, ref: "ParkingSpace", required: true },
    vehicle: { type: mongoose.Schema.Types.ObjectId, ref: "VehicleModel", required: true },
    bookingDate: { type: Date, default: Date.now, required: true },
    placeNo: { type: String, required: true },
    amt: { type: Number, required: true },
    arrivalDate: { type: Date, required: true },
    leaveDate: { type: Date, required: true },
    finalPayAmt: { type: Number, required: true },
    paymentMode: { type: String, enum: ["Cash", "Card", "UPI", "Bank Transfer"], required: true },
    status: { type: String, enum: ["Booked", "Cancelled", "Completed"], default: "Booked" },
    statusPark: { type: String, enum: ["Occupied", "Vacant"], default: "Vacant" },
  },
  { timestamps: true }
);

module.exports = mongoose.model("BookParking", BookParkingSchema);








const BookParking = require("../models/BookParking");

// Create a new parking booking
const createBookParking = async (data) => {
  return await BookParking.create(data);
};

// Get all parking bookings
const getAllBookParkings = async () => {
  return await BookParking.find().populate(["user", "businessRegisterPlace", "parkingSpace", "vehicle"]);
};

// Get a specific booking by ID
const getBookParkingById = async (id) => {
  return await BookParking.findById(id).populate(["user", "businessRegisterPlace", "parkingSpace", "vehicle"]);
};

// Update a booking
const updateBookParking = async (id, data) => {
  return await BookParking.findByIdAndUpdate(id, data, { new: true });
};

// Delete a booking
const deleteBookParking = async (id) => {
  return await BookParking.findByIdAndDelete(id);
};

module.exports = {
  createBookParking,
  getAllBookParkings,
  getBookParkingById,
  updateBookParking,
  deleteBookParking,
};






const bookParkingService = require("../services/bookParkingService");

// Create a new parking booking
const createBookParking = async (req, res) => {
  try {
    const bookParking = await bookParkingService.createBookParking(req.body);
    res.status(201).json(bookParking);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all parking bookings
const getAllBookParkings = async (req, res) => {
  try {
    const bookParkings = await bookParkingService.getAllBookParkings();
    res.status(200).json(bookParkings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a specific booking by ID
const getBookParkingById = async (req, res) => {
  try {
    const bookParking = await bookParkingService.getBookParkingById(req.params.id);
    if (!bookParking) return res.status(404).json({ message: "Booking not found" });
    res.status(200).json(bookParking);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a parking booking
const updateBookParking = async (req, res) => {
  try {
    const updatedBookParking = await bookParkingService.updateBookParking(req.params.id, req.body);
    if (!updatedBookParking) return res.status(404).json({ message: "Booking not found" });
    res.status(200).json(updatedBookParking);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Delete a parking booking
const deleteBookParking = async (req, res) => {
  try {
    const deletedBookParking = await bookParkingService.deleteBookParking(req.params.id);
    if (!deletedBookParking) return res.status(404).json({ message: "Booking not found" });
    res.status(200).json({ message: "Booking deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createBookParking,
  getAllBookParkings,
  getBookParkingById,
  updateBookParking,
  deleteBookParking,
};



const express = require("express");
const router = express.Router();
const bookParkingController = require("../controllers/bookParkingController");

router.post("/", bookParkingController.createBookParking);
router.get("/", bookParkingController.getAllBookParkings);
router.get("/:id", bookParkingController.getBookParkingById);
router.put("/:id", bookParkingController.updateBookParking);
router.delete("/:id", bookParkingController.deleteBookParking);

module.exports = router;
