const mongoose = require("mongoose");

const PackageBillSchema = new mongoose.Schema(
  {
    packageId: { type: mongoose.Schema.Types.ObjectId, ref: "Package", required: true },
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    businessRegisterPlaceId: { type: mongoose.Schema.Types.ObjectId, ref: "BusinessPlace", required: true },
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    invoiceNo: { type: String, required: true, unique: true },
    finalAmount: { type: Number, required: true },
    paymentMode: { type: String, enum: ["Cash", "Card", "UPI", "Bank Transfer"], required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("PackageBill", PackageBillSchema);






const PackageBill = require("../models/PackageBill");

// Create a new package bill
const createPackageBill = async (data) => {
  return await PackageBill.create(data);
};

// Get all package bills
const getAllPackageBills = async () => {
  return await PackageBill.find().populate(["packageId", "userId", "businessRegisterPlaceId"]);
};

// Get a specific package bill by ID
const getPackageBillById = async (id) => {
  return await PackageBill.findById(id).populate(["packageId", "userId", "businessRegisterPlaceId"]);
};

// Update a package bill
const updatePackageBill = async (id, data) => {
  return await PackageBill.findByIdAndUpdate(id, data, { new: true });
};

// Delete a package bill
const deletePackageBill = async (id) => {
  return await PackageBill.findByIdAndDelete(id);
};

module.exports = {
  createPackageBill,
  getAllPackageBills,
  getPackageBillById,
  updatePackageBill,
  deletePackageBill,
};






const packageBillService = require("../services/packageBillService");

// Create a new package bill
const createPackageBill = async (req, res) => {
  try {
    const packageBill = await packageBillService.createPackageBill(req.body);
    res.status(201).json(packageBill);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all package bills
const getAllPackageBills = async (req, res) => {
  try {
    const packageBills = await packageBillService.getAllPackageBills();
    res.status(200).json(packageBills);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a specific package bill by ID
const getPackageBillById = async (req, res) => {
  try {
    const packageBill = await packageBillService.getPackageBillById(req.params.id);
    if (!packageBill) return res.status(404).json({ message: "Package Bill not found" });
    res.status(200).json(packageBill);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a package bill
const updatePackageBill = async (req, res) => {
  try {
    const updatedPackageBill = await packageBillService.updatePackageBill(req.params.id, req.body);
    if (!updatedPackageBill) return res.status(404).json({ message: "Package Bill not found" });
    res.status(200).json(updatedPackageBill);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Delete a package bill
const deletePackageBill = async (req, res) => {
  try {
    const deletedPackageBill = await packageBillService.deletePackageBill(req.params.id);
    if (!deletedPackageBill) return res.status(404).json({ message: "Package Bill not found" });
    res.status(200).json({ message: "Package Bill deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createPackageBill,
  getAllPackageBills,
  getPackageBillById,
  updatePackageBill,
  deletePackageBill,
};




const express = require("express");
const router = express.Router();
const packageBillController = require("../controllers/packageBillController");

router.post("/", packageBillController.createPackageBill);
router.get("/", packageBillController.getAllPackageBills);
router.get("/:id", packageBillController.getPackageBillById);
router.put("/:id", packageBillController.updatePackageBill);
router.delete("/:id", packageBillController.deletePackageBill);

module.exports = router;
