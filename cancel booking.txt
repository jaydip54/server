const mongoose = require("mongoose");

const CancelBookingSchema = new mongoose.Schema(
  {
    booking: { type: mongoose.Schema.Types.ObjectId, ref: "BookParking", required: true },
    user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    cancelDate: { type: Date, default: Date.now, required: true },
    reason: { type: String, required: true },
    refundAmount: { type: Number, default: 0 },
    status: { type: String, enum: ["Pending", "Refunded", "Rejected"], default: "Pending" },
  },
  { timestamps: true }
);

module.exports = mongoose.model("CancelBooking", CancelBookingSchema);



const CancelBooking = require("../models/CancelBooking");

// Create a new cancellation request
const createCancelBooking = async (data) => {
  return await CancelBooking.create(data);
};

// Get all cancellation requests
const getAllCancelBookings = async () => {
  return await CancelBooking.find().populate(["booking", "user"]);
};

// Get a specific cancellation request by ID
const getCancelBookingById = async (id) => {
  return await CancelBooking.findById(id).populate(["booking", "user"]);
};

// Update cancellation status
const updateCancelBooking = async (id, data) => {
  return await CancelBooking.findByIdAndUpdate(id, data, { new: true });
};

// Delete a cancellation request
const deleteCancelBooking = async (id) => {
  return await CancelBooking.findByIdAndDelete(id);
};

module.exports = {
  createCancelBooking,
  getAllCancelBookings,
  getCancelBookingById,
  updateCancelBooking,
  deleteCancelBooking,
};





const cancelBookingService = require("../services/cancelBookingService");

// Create a new cancellation request
const createCancelBooking = async (req, res) => {
  try {
    const cancelBooking = await cancelBookingService.createCancelBooking(req.body);
    res.status(201).json(cancelBooking);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all cancellation requests
const getAllCancelBookings = async (req, res) => {
  try {
    const cancelBookings = await cancelBookingService.getAllCancelBookings();
    res.status(200).json(cancelBookings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a specific cancellation request by ID
const getCancelBookingById = async (req, res) => {
  try {
    const cancelBooking = await cancelBookingService.getCancelBookingById(req.params.id);
    if (!cancelBooking) return res.status(404).json({ message: "Cancellation request not found" });
    res.status(200).json(cancelBooking);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a cancellation request status
const updateCancelBooking = async (req, res) => {
  try {
    const updatedCancelBooking = await cancelBookingService.updateCancelBooking(req.params.id, req.body);
    if (!updatedCancelBooking) return res.status(404).json({ message: "Cancellation request not found" });
    res.status(200).json(updatedCancelBooking);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Delete a cancellation request
const deleteCancelBooking = async (req, res) => {
  try {
    const deletedCancelBooking = await cancelBookingService.deleteCancelBooking(req.params.id);
    if (!deletedCancelBooking) return res.status(404).json({ message: "Cancellation request not found" });
    res.status(200).json({ message: "Cancellation request deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createCancelBooking,
  getAllCancelBookings,
  getCancelBookingById,
  updateCancelBooking,
  deleteCancelBooking,
};




const express = require("express");
const router = express.Router();
const cancelBookingController = require("../controllers/cancelBookingController");

router.post("/", cancelBookingController.createCancelBooking);
router.get("/", cancelBookingController.getAllCancelBookings);
router.get("/:id", cancelBookingController.getCancelBookingById);
router.put("/:id", cancelBookingController.updateCancelBooking);
router.delete("/:id", cancelBookingController.deleteCancelBooking);

module.exports = router;


