const mongoose = require("mongoose");

const ParkingAssignmentSchema = new mongoose.Schema(
  {
    businessPlaceId: { type: mongoose.Schema.Types.ObjectId, ref: "BusinessPlace", required: true },
    parkingSpaceId: { type: mongoose.Schema.Types.ObjectId, ref: "ParkingSpace", required: true },
    assignedAt: { type: Date, default: Date.now },
  },
  { timestamps: true }
);

module.exports = mongoose.model("ParkingAssignment", ParkingAssignmentSchema);




const ParkingAssignment = require("../models/ParkingAssignment");

// Assign a parking space to a business place
const assignParkingSpace = async (data) => {
  return await ParkingAssignment.create(data);
};

// Get all assigned parking spaces
const getAllAssignments = async () => {
  return await ParkingAssignment.find().populate(["businessPlaceId", "parkingSpaceId"]);
};

// Get a specific assignment by ID
const getAssignmentById = async (id) => {
  return await ParkingAssignment.findById(id).populate(["businessPlaceId", "parkingSpaceId"]);
};

// Update a parking space assignment
const updateAssignment = async (id, data) => {
  return await ParkingAssignment.findByIdAndUpdate(id, data, { new: true });
};

// Delete a parking space assignment
const deleteAssignment = async (id) => {
  return await ParkingAssignment.findByIdAndDelete(id);
};

module.exports = {
  assignParkingSpace,
  getAllAssignments,
  getAssignmentById,
  updateAssignment,
  deleteAssignment,
};













const parkingAssignmentService = require("../services/parkingAssignmentService");

// Assign a parking space to a business place
const assignParkingSpace = async (req, res) => {
  try {
    const assignment = await parkingAssignmentService.assignParkingSpace(req.body);
    res.status(201).json(assignment);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all assigned parking spaces
const getAllAssignments = async (req, res) => {
  try {
    const assignments = await parkingAssignmentService.getAllAssignments();
    res.status(200).json(assignments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a specific assignment by ID
const getAssignmentById = async (req, res) => {
  try {
    const assignment = await parkingAssignmentService.getAssignmentById(req.params.id);
    if (!assignment) return res.status(404).json({ message: "Assignment not found" });
    res.status(200).json(assignment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a parking space assignment
const updateAssignment = async (req, res) => {
  try {
    const updatedAssignment = await parkingAssignmentService.updateAssignment(req.params.id, req.body);
    if (!updatedAssignment) return res.status(404).json({ message: "Assignment not found" });
    res.status(200).json(updatedAssignment);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Delete a parking space assignment
const deleteAssignment = async (req, res) => {
  try {
    const deletedAssignment = await parkingAssignmentService.deleteAssignment(req.params.id);
    if (!deletedAssignment) return res.status(404).json({ message: "Assignment not found" });
    res.status(200).json({ message: "Assignment deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  assignParkingSpace,
  getAllAssignments,
  getAssignmentById,
  updateAssignment,
  deleteAssignment,
};





    const express = require("express");
const router = express.Router();
const parkingAssignmentController = require("../controllers/parkingAssignmentController");

router.post("/", parkingAssignmentController.assignParkingSpace);
router.get("/", parkingAssignmentController.getAllAssignments);
router.get("/:id", parkingAssignmentController.getAssignmentById);
router.put("/:id", parkingAssignmentController.updateAssignment);
router.delete("/:id", parkingAssignmentController.deleteAssignment);

module.exports = router;


















